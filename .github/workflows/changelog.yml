name: Version & Changelog

on:
  pull_request:
    types: [opened, edited]
    branches:
      - dev

jobs:
  version-changelog:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout PR branch
        uses: actions/checkout@v4
        with:
          ref: ${{ github.head_ref }}
          persist-credentials: false

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Install jq
        run: sudo apt-get install -y jq

      - name: Detect bump type
        id: bump
        run: |
          labels='${{ toJson(github.event.pull_request.labels) }}'
          echo "Labels: $labels"
          if echo "$labels" | jq -e '.[] | select(.name=="major")' >/dev/null; then
            echo "type=major" >> $GITHUB_OUTPUT
          elif echo "$labels" | jq -e '.[] | select(.name=="patch")' >/dev/null; then
            echo "type=patch" >> $GITHUB_OUTPUT
          else
            echo "type=minor" >> $GITHUB_OUTPUT
          fi

      - name: Bump version (only on opened)
        if: github.event.action == 'opened'
        run: |
          echo "Current version before bump: $(jq -r .version package.json)"
          npx npm version ${{ steps.bump.outputs.type }} --no-git-tag-version
          echo "New version after bump: $(jq -r .version package.json)"

      - name: Update CHANGELOG.md
        run: |
          if [ ! -f CHANGELOG.md ]; then
            echo "# Changelog" > CHANGELOG.md
            echo "" >> CHANGELOG.md
          fi

          pr_title="${{ github.event.pull_request.title }}"
          pr_body="${{ github.event.pull_request.body }}"
          version=$(jq -r .version package.json)

          # Extracting the "## Description" section
          description=$(echo "$pr_body" | awk '/## Description/{flag=1; next} /##/{flag=0} flag' | sed '/^$/d')

          # Remove old block with the same version, if exists
          if grep -q "## v$version" CHANGELOG.md; then
            awk -v ver="## v$version" '
              BEGIN {skip=0}
              $0 ~ ver {skip=1; next}
              skip && $0 ~ /^## / {skip=0}
              !skip {print}
            ' CHANGELOG.md > CHANGELOG.tmp && mv CHANGELOG.tmp CHANGELOG.md
          fi

          # Add new block on top
          tmp_file=$(mktemp)
          {
            echo "## v$version"
            echo ""
            echo "### Changes"
            echo "- $pr_title"
            if [ -n "$description" ]; then
              echo "  $description"
            else
              echo "  No description provided"
            fi
            echo ""
            cat CHANGELOG.md
          } > "$tmp_file"
          mv "$tmp_file" CHANGELOG.md

      - name: Commit changes
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

          git remote set-url origin https://x-access-token:${GITHUB_TOKEN}@github.com/${{ github.repository }}.git

          git fetch origin
          git pull --rebase origin ${{ github.head_ref }} || git rebase --abort || git pull --strategy=ours origin ${{ github.head_ref }}

          git add CHANGELOG.md
          [ -f package.json ] && git add package.json
          [ -f package-lock.json ] && git add package-lock.json

          if git diff --cached --quiet; then
            echo "No changes to commit"
            exit 0
          fi

          git commit -m "chore: bump version & update changelog [skip ci]"

          git push origin HEAD:${{ github.head_ref }}

      - name: Update PR title with version
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const version = require('./package.json').version
            const oldTitle = context.payload.pull_request.title
            const newTitle = `[v${version}] ${oldTitle.replace(/^\[v[0-9]+\.[0-9]+\.[0-9]+\]\s*/, '')}`
            await github.rest.pulls.update({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: context.payload.pull_request.number,
              title: newTitle
            })
