name: Version & Changelog

on:
  pull_request:
    types: [opened, edited]
    branches:
      - dev

jobs:
  version-changelog:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout PR branch
        uses: actions/checkout@v4
        with:
          ref: ${{ github.head_ref }}
          persist-credentials: false
          fetch-depth: 0

      - name: Fetch all tags
        run: |
          git remote set-url origin https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}.git
          git fetch --tags origin

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Install jq
        run: sudo apt-get install -y jq

      - name: Detect bump type
        id: bump
        run: |
          labels='${{ toJson(github.event.pull_request.labels) }}'
          echo "Labels: $labels"
          if echo "$labels" | jq -e '.[] | select(.name=="major")' >/dev/null; then
            echo "type=major" >> $GITHUB_OUTPUT
          elif echo "$labels" | jq -e '.[] | select(.name=="patch")' >/dev/null; then
            echo "type=patch" >> $GITHUB_OUTPUT
          else
            echo "type=minor" >> $GITHUB_OUTPUT
          fi

      - name: Bump version (only on opened)
        if: github.event.action == 'opened'
        id: bump_version
        run: |
          latest_tag=$(git tag --list "v*" | sort -V | tail -n1)
          if [ -z "$latest_tag" ]; then
            latest_tag="v0.0.0"
          fi
          echo "Latest tag: $latest_tag"

          type="${{ steps.bump.outputs.type }}"
          IFS='.' read -r major minor patch <<<"${latest_tag#v}"
          case "$type" in
            major) major=$((major+1)); minor=0; patch=0 ;;
            minor) minor=$((minor+1)); patch=0 ;;
            patch) patch=$((patch+1)) ;;
          esac
          new_version="v$major.$minor.$patch"
          echo "Next version: $new_version"
          echo "version=${new_version#v}" >> $GITHUB_OUTPUT

          jq ".version=\"${new_version#v}\"" package.json > package.tmp.json
          mv package.tmp.json package.json

      - name: Prepare PR title with version
        id: pr_title
        run: |
          version="${{ steps.bump_version.outputs.version }}"
          old_title="${{ github.event.pull_request.title }}"
          clean_title=$(echo "$old_title" | sed -E 's/^\[v[0-9]+\.[0-9]+\.[0-9]+\]\s*//')
          new_title="[v$version] $clean_title"
          echo "new_title=$new_title" >> $GITHUB_OUTPUT

      - name: Update CHANGELOG.md
        run: |
          if [ ! -f CHANGELOG.md ]; then
            echo "# Changelog" > CHANGELOG.md
            echo "" >> CHANGELOG.md
          fi

          pr_title="${{ steps.pr_title.outputs.new_title }}"
          pr_body="${{ github.event.pull_request.body }}"
          version="${{ steps.bump_version.outputs.version }}"
          date=$(date +'%Y-%m-%d')

          description=$(echo "$pr_body" | awk '/## Description/{flag=1; next} /##/{flag=0} flag' | sed '/^$/d')

          awk -v v="$version" '
            BEGIN {skip=0}
            $0 ~ ("^## v" v) {skip=1; next}
            skip && $0 ~ /^## / {skip=0}
            !skip {print}
          ' CHANGELOG.md > CHANGELOG.clean.tmp || true
          mv CHANGELOG.clean.tmp CHANGELOG.md

          tmp_file=$(mktemp)
          {
            echo "## v$version ($date)"
            echo ""
            echo "### Changes"
            echo "- $pr_title"
            if [ -n "$description" ]; then
              echo "$description"
            else
              echo "No description provided"
            fi
            echo ""
            cat CHANGELOG.md
          } > "$tmp_file"
          mv "$tmp_file" CHANGELOG.md

      - name: Commit changes
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

          git remote set-url origin https://x-access-token:${GITHUB_TOKEN}@github.com/${{ github.repository }}.git

          git fetch origin
          git pull --rebase origin ${{ github.head_ref }} || git rebase --abort || git pull --strategy=ours origin ${{ github.head_ref }}

          git add CHANGELOG.md
          [ -f package.json ] && git add package.json
          [ -f package-lock.json ] && git add package-lock.json

          if git diff --cached --quiet; then
            echo "No changes to commit"
            exit 0
          fi

          git commit -m "chore: bump version & update changelog [skip ci]"
          git push origin HEAD:${{ github.head_ref }}

      - name: Create and push git tag
        if: github.event.action == 'opened'
        run: |
          // To avoid a race condition, we need to fetch the tags first
          version="${{ steps.bump_version.outputs.version }}"
          git fetch --tags origin
          if git rev-parse "v$version" >/dev/null 2>&1; then
            echo "Tag v$version already exists, skipping"
          else
            git tag "v$version"
            git push origin "v$version"
          fi

      - name: Update PR title with version
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const newTitle = process.env.NEW_TITLE
            await github.rest.pulls.update({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: context.payload.pull_request.number,
              title: newTitle
            })
        env:
          NEW_TITLE: ${{ steps.pr_title.outputs.new_title }}
